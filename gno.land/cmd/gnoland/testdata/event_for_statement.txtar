# start a new node
gnoland start

gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/demo/foree -gas-fee 1000000ugnot -gas-wanted 2500000 -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'GAS WANTED: 2500000'
stdout 'GAS USED: [0-9]+'
stdout 'HEIGHT: [0-9]+'
stdout 'EVENTS: \[\]'

gnokey maketx call -pkgpath gno.land/r/demo/foree -func Foo -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'GAS WANTED: 2000000'
stdout 'GAS USED: [0-9]+'
stdout 'HEIGHT: [0-9]+'
stdout 'EVENTS: \[\{("type":"\w+","pkg_path":".*?","identifier":"\w+","attributes":\[(?:\{"key":"\w+","value":"\w+"\}(?:,)?)*\])\}(?:,\{("type":"\w+","pkg_path":".*?","identifier":"\w+","attributes":\[(?:\{"key":"\w+","value":"\w+"\}(?:,)?)*\])\})*\]'

gnokey maketx call -pkgpath gno.land/r/demo/foree -func Bar -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'GAS WANTED: 2000000'
stdout 'GAS USED: [0-9]+'
stdout 'HEIGHT: [0-9]+'
stdout 'EVENTS: \[\{("type":"\w+","pkg_path":".*?","identifier":"\w+","attributes":\[(?:\{"key":"\w+","value":"\w+"\}(?:,)?)*\])\}(?:,\{("type":"\w+","pkg_path":".*?","identifier":"\w+","attributes":\[(?:\{"key":"\w+","value":"\w+"\}(?:,)?)*\])\})*\]'


-- foree.gno --

package foree

import "std"

func Foo() {
	for i := 0; i < 10; i++ {
		std.Emit("testing", "foo", "bar")
	}
}

const (
	sender = "sender"
	receiver = "receiver"
)

type contractA struct{}

func (c *contractA) sender(cb func()) {
	subSender()
	cb()
}

func subSender() {
	std.Emit(sender, "k1", "v1", "k2", "v2")
}

type contractB struct{}

func (c *contractB) subReceiver() {
	std.Emit(receiver, "bar", "baz")
}

func Bar() {
    a := &contractA{}
	b := &contractB{}
	for i := 0; i < 2; i++ {
		a.sender(func() {
			b.subReceiver()
		})
	}
}
