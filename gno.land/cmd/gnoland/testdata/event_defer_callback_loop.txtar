# start a new node
gnoland start

gnokey maketx addpkg -pkgdir $WORK -pkgpath gno.land/r/demo/edcl -gas-fee 1000000ugnot -gas-wanted 2500000 -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'GAS WANTED: 2500000'
stdout 'GAS USED: [0-9]+'
stdout 'EVENTS: \[\]'

gnokey maketx call -pkgpath gno.land/r/demo/edcl -func Main -gas-fee 1000000ugnot -gas-wanted 2000000 -broadcast -chainid=tendermint_test test1
stdout OK!
stdout 'GAS WANTED: 2000000'
stdout 'GAS USED: [0-9]+'
stdout 'EVENTS: \[?.*\]'

-- edcl.gno --

package edcl

import (
	"std"
    "strconv"
)

func Main() {
	deferEmitExample()
}

func deferEmitExample() {
	defer func() {
		std.Emit("DeferEvent", "key1", "value1", "key2", "value2")
		println("Defer emit executed")
	}()

	forLoopEmitExample(3, func(i int) {
		std.Emit("ForLoopEvent", "iteration", strconv.Itoa(i), "key", "value")
	    println("For loop emit executed: iteration ", i)
	})

	callbackEmitExample(func() {
		std.Emit("CallbackEvent", "key1", "value1", "key2", "value2")
		println("Callback emit executed")
	})

	println("deferEmitExample completed")
}

func forLoopEmitExample(count int, callback func(int)) {
	defer func() {
		std.Emit("ForLoopCompletionEvent", "count", strconv.Itoa(count))
		println("For loop completion emit executed ", count)
	}()

	for i := 0; i < count; i++ {
		callback(i)
	}
}

func callbackEmitExample(callback func()) {
	defer func() {
		std.Emit("CallbackCompletionEvent", "key", "value")
		println("Callback completion emit executed")
	}()

	callback()
}