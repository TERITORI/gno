create interface packages

    type TheInterface interface {
        Whatever()
    }

create a realm for each of these interface package with funcs

    func Register(v TheInferface)

        implementerRealm := std.PrevRealm()
        tree.Set(implementerRealm, v)

    func Get(address std.Address) TheInterface

        return tree.Get(address)


when you implement an interface in a new realm

    var implem = newImplem()

    func init() {
        the_interface_realm.Register(implem)
    }

when you want to consume the interface via realm ref (package path or address) in some realm created before the implem

    func DoSomething(realmRef Realm) {
        the_interface_realm.Get(realmRef).Whatever()
    }